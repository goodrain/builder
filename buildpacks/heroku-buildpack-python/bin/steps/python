#!/usr/bin/env bash

set +e
runtime-fixer runtime.txt
PYTHON_VERSION=$(cat runtime.txt)

if [ $ARCH == "arm64" ]; then
  MAJOR_VERSION=$(echo ${PYTHON_VERSION} | sed -e 's/^python-//' -e 's/-arm64$//' -e 's/..$//')
else
  MAJOR_VERSION=$(echo ${PYTHON_VERSION#*-} | sed 's/..$//')
fi

# The location of the pre-compiled python binary.
VENDORED_PYTHON="${VENDOR_URL}/runtimes/$PYTHON_VERSION.tar.gz"
if [ -n "${CUSTOMIZE_RUNTIMES}" ]; then
  VENDORED_PYTHON=${CUSTOMIZE_RUNTIMES_URL}
fi

# check if runtime exists
# Python3.7 and later rely on openssl 1.0.2 and later.
# There are currently no plans to upgrade the base image adaptation to this point
# So the build process is blocked when python-3.7.x is received.
if [ $(expr $MAJOR_VERSION \>= 4.0) -eq 1 ]; then
  puts-warn "Rainbond does not supports runtime versions 4.0.x or later versions."
  puts-warn "We recommend upgrading by specifying the default supported version ($LATEST_36)."
  puts-warn "Exiting..."
  exit 1
elif curl --output /dev/null --silent --head --fail "$VENDORED_PYTHON"; then
  puts-step "Using supported version $PYTHON_VERSION"
else
  puts-warn "Rainbond supports runtime versions $LATEST_35, $LATEST_36, and $LATEST_2."
  puts-warn "You are using $PYTHON_VERSION, which is unsupported."
  puts-warn "We recommend upgrading by specifying the default supported version ($LATEST_36)."
  puts-warn "Exiting..."
  exit 1
fi

if [[ "$STACK" != "$CACHED_PYTHON_STACK" ]]; then
  puts-step "Stack has changed from $CACHED_PYTHON_STACK to $STACK, clearing cache"
  rm -fr .heroku/python-stack .heroku/python-version .heroku/python .heroku/vendor .heroku/python .heroku/python-sqlite3-version
fi

# need to clear the cache for first time installing SQLite3,
# since the version is changing and could lead to runtime errors
# with compiled extensions.
if [ -d .heroku/python ] && [ ! -f .heroku/python-sqlite3-version ] && python_sqlite3_check "$PYTHON_VERSION"; then
  puts-step "Need to update SQLite3, clearing cache"
  rm -fr .heroku/python-stack .heroku/python-version .heroku/python .heroku/vendor
fi

if [ -f .heroku/python-version ]; then
  if [ ! "$(cat .heroku/python-version)" = "$PYTHON_VERSION" ]; then
    puts-step "Found $(cat .heroku/python-version), removing"
    rm -fr .heroku/python
  else
    SKIP_INSTALL=1
  fi
fi

if [ ! "$SKIP_INSTALL" ]; then
  [ -z "$DEBUG_INFO" ] && puts-step "Installing $PYTHON_VERSION" || puts-step "Installing $PYTHON_VERSION from $VENDORED_PYTHON"

  # Prepare destination directory.
  mkdir -p .heroku/python

  mcount "version.python.$PYTHON_VERSION"
  if ! curl "${VENDORED_PYTHON}" -s | tar zxv -C .heroku/python &>/dev/null; then
    puts-warn "Requested runtime ($PYTHON_VERSION) is not available for this stack ($STACK)."
    exit 1
  fi

  # When only python2/python3 is in the bin directory and not python
  if [ ! -f /app/.heroku/python/bin/python ]; then
    ln -s $(find /app/.heroku/python/bin -type f -name "python*" -not -name "*m*") /app/.heroku/python/bin/python
    puts-step "Found $(find /app/.heroku/python/bin -type f -name "python*" -not -name "*m*" | awk -F '/' '{print $NF}') binary,change to python"
  fi

  # When only pip3 is in the bin directory and not pip
  if [ ! -f /app/.heroku/python/bin/pip ] && [ -f /app/.heroku/python/bin/pip3 ]; then
    mv /app/.heroku/python/bin/pip3 /app/.heroku/python/bin/pip
    puts-step "Found pip3 binary,change to pip"
  fi

  puts-done

  # Record for future reference.
  echo "$PYTHON_VERSION" >.heroku/python-version
  echo "$STACK" >.heroku/python-stack
  FRESH_PYTHON=true

  hash -r
fi

# If Pip isn't up to date:
if [ "$FRESH_PYTHON" ] || [[ ! $(pip --version) == *$PIP_UPDATE* ]]; then

  # puts-step "Installing pip $PIP_UPDATE"

  # Remove old installations.
  rm -fr /app/.heroku/python/lib/python*/site-packages/pip-*
  rm -fr /app/.heroku/python/lib/python*/site-packages/setuptools-*
  RUN_PIP_INDEX_URL="${PIP_INDEX_URL:-https://mirrors.aliyun.com/pypi/simple/}" # change to aliyun mirrors
  # if ! /app/.heroku/python/bin/python "$ROOT_DIR/vendor/get-pip.py" pip=="$PIP_UPDATE" -i "${RUN_PIP_INDEX_URL}" --default-timeout=100; then
  #   puts-warn "Install pip $PIP_UPDATE failure"
  #   exit 1
  # fi
  # upgrade pip
  puts-step "Upgrade pip to latest version"
  pushd /app/.heroku/python/bin
  /app/.heroku/python/bin/python -m pip install -i "$RUN_PIP_INDEX_URL" --upgrade pip --default-timeout=100
  /app/.heroku/python/bin/pip install "$ROOT_DIR/vendor/setuptools-39.0.1-py2.py3-none-any.whl" &>/dev/null
  popd
  puts-done
fi

set -e
hash -r
