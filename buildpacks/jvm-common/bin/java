#!/usr/bin/env bash

LATEST_JDK_VERSION="1.8"

# 默认情况下，使用 http://lang.goodrain.me 经由 rbd-resource-proxy 代理到 OSS 对象存储下载各类资源
# 本地调试时，可以使用 $LANG_GOODRAIN_ME 直接指定到 OSS 对象存储的桶域名
# for arm64 and amd64. what a nice site https://adoptopenjdk.net/archive.html
case $ARCH in
arm64)
  if [ ${STACK:-""} = "cedar" ]; then
    DEFAULT_JDK_VERSION=-"1.8"
    JDK_URL_1_8=${JDK_URL_1_8:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/arm64/openjdk-8u312b07_linux-aarch64.tar.gz"}
    JDK_URL_1_7=${JDK_URL_1_7:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/do_not_support_1.7_anymore"}
    JDK_URL_1_6=${JDK_URL_1_6:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/do_not_support_1.6_anymore"}
  else
    DEFAULT_JDK_VERSION="1.8"
    JDK_BASE_URL=${JDK_BASE_URL:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jdk/cedar-14"}
    JDK_URL_13=${JDK_URL_12:-"$JDK_BASE_URL/arm64/openjdk-13.0.2_8_linux-aarch64.tar.gz"}
    JDK_URL_12=${JDK_URL_12:-"$JDK_BASE_URL/arm64/openjdk-12.0.2_10_linux-aarch64.tar.gz"}
    JDK_URL_11=${JDK_URL_11:-"$JDK_BASE_URL/arm64/openjdk-11.0.13_8_linux-aarch64.tar.gz"}
    JDK_URL_10=${JDK_URL_10:-"$JDK_BASE_URL/arm64/openjdk-10.0.2_13_linux-aarch64.tar.gz"}
    JDK_URL_1_9=${JDK_URL_1_9:-"$JDK_BASE_URL/arm64/openjdk-9_181_linux-aarch64.tar.gz"}
    JDK_URL_1_8=${JDK_URL_1_8:-"$JDK_BASE_URL/arm64/openjdk-8u312b07_linux-aarch64.tar.gz"}
    JDK_URL_1_7=${JDK_URL_1_7:-"$JDK_BASE_URL/do_not_support_1.7_anymore"}
    JDK_URL_1_6=${JDK_URL_1_6:-"$JDK_BASE_URL/do_not_support_1.6_anymore"}
  fi
  ORACLEJDK_URL_11="${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jdk/jdk-11.0.13_linux-aarch64_bin.tar.gz"
  ;;
x86_64)
  if [ ${STACK:-""} = "cedar" ]; then
    DEFAULT_JDK_VERSION="1.6"
    JDK_URL_1_8=${JDK_URL_1_8:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jdk/openjdk1.8.0_20.tar.gz"}
    JDK_URL_1_7=${JDK_URL_1_7:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jdk/openjdk1.7.0_55.tar.gz"}
    JDK_URL_1_6=${JDK_URL_1_6:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jdk/openjdk1.6.0_27.tar.gz"}
  else
    # DEFAULT_JDK_VERSION="1.8"
    # JDK_BASE_URL=${JDK_BASE_URL:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jdk/cedar-14"}
    # JDK_URL_13=${JDK_URL_12:-"$JDK_BASE_URL/openjdk13.0.1.tar.gz"}
    # JDK_URL_12=${JDK_URL_12:-"$JDK_BASE_URL/openjdk12.0.2.tar.gz"}
    # JDK_URL_11=${JDK_URL_11:-"$JDK_BASE_URL/openjdk11.0.5.tar.gz"}
    # JDK_URL_10=${JDK_URL_10:-"$JDK_BASE_URL/openjdk10.0.2.tar.gz"}
    # JDK_URL_1_9=${JDK_URL_1_9:-"$JDK_BASE_URL/openjdk9.0.4.tar.gz"}
    # JDK_URL_1_8=${JDK_URL_1_8:-"$JDK_BASE_URL/openjdk1.8.0_232.tar.gz"}
    # JDK_URL_1_7=${JDK_URL_1_7:-"$JDK_BASE_URL/openjdk1.7.0_242.tar.gz"}
    # JDK_URL_1_6=${JDK_URL_1_6:-"$JDK_BASE_URL/openjdk1.6.0_27.tar.gz"}

    DEFAULT_JDK_VERSION="1.8"
    JDK_BASE_URL=${JDK_BASE_URL:-"${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jdk/jammy-20"}
    JDK_URL_16=${JDK_URL_16:-"$JDK_BASE_URL/openjdk16.0.2_7.tar.gz"}
    JDK_URL_15=${JDK_URL_15:-"$JDK_BASE_URL/openjdk15.0.2_7.tar.gz"}
    JDK_URL_14=${JDK_URL_14:-"$JDK_BASE_URL/openjdk14.0.2_12.tar.gz"}
    JDK_URL_13=${JDK_URL_13:-"$JDK_BASE_URL/openjdk13.0.2_8.tar.gz"}
    JDK_URL_12=${JDK_URL_12:-"$JDK_BASE_URL/openjdk12.0.2_10.tar.gz"}
    JDK_URL_11=${JDK_URL_11:-"$JDK_BASE_URL/openjdk11.0.19_7.tar.gz"}
    JDK_URL_10=${JDK_URL_10:-"$JDK_BASE_URL/openjdk10.0.2_13.tar.gz"}
    JDK_URL_1_9=${JDK_URL_1_9:-"$JDK_BASE_URL/openjdk9_181.tar.gz"}
    JDK_URL_1_8=${JDK_URL_1_8:-"$JDK_BASE_URL/openjdk8_372_07.tar.gz"}
  fi

  ORACLEJDK_URL_11="http://lang.goodrain.me/jdk/jdk-11.0.1_linux-x64_bin.tar.gz"
  ;;
esac

install_java_with_overlay() {
  local buildDir=${1}
  local javaVersion=$(detect_java_version ${buildDir})
  if [ "$javaVersion" = "stack" ]; then
    status "Using stack JDK"
  else
    [ -z "${ENABLE_ORACLEJDK}" ] && status_pending "Installing OpenJDK ${javaVersion}" || status_pending "Installing Custom JDK"
    install_java ${buildDir} ${javaVersion}
    jdk_overlay ${buildDir}
    _cache_version "${jdkVersion}" "${cacheDir}"
    status_done
  fi
}

install_java() {
  local baseDir=$1
  if [ ! -d "${baseDir}" ]; then
    error_return "Invalid directory to install java."
    return 1
  fi

  local javaVersion=${2:-$(get_default_java_version)}
  local jdkUrl=$(_get_jdk_download_url "${javaVersion}")
  local jdkDir="${baseDir}"/.jdk
  local jdkTarball="${jdkDir}"/jdk.tar.gz
  local javaExe="${jdkDir}/bin/java"
  mkdir -p "${jdkDir}"
  if [ ! -f "${jdkTarball}" ] && [ ! -f "${javaExe}" ] || is_java_version_change "${jdkDir}" "${javaVersion}"; then
    rm -rf "${jdkDir}"
    mkdir -p "${jdkDir}"
    if [ ! -z "${ENABLE_ORACLEJDK}" ]; then
      jdkUrl=${ORACLEJDK_URL:-$ORACLEJDK_URL_11}
    fi
    [ -z "$DEBUG_INFO" ] && echo "" || echo "Download JDK from ${jdkUrl} "
    validate_jdk_url ${jdkUrl} ${jdkVersion}
    curl --retry 3 --silent --show-error --location ${jdkUrl} --output ${jdkTarball}
    # for arm64 and amd64
    if [ $ARCH == "arm64" ]; then
      tar pxzf ${jdkTarball} --strip-components 1 --directory "${jdkDir}"
    elif [ $ARCH == "x86_64" ]; then
      tar pxzf ${jdkTarball} -C "${jdkDir}"
    fi
    rm ${jdkTarball}
    install_cacerts ${jdkDir}
    echo "${javaVersion}" >"${jdkDir}/version"
    if [ ! -z "${ENABLE_ORACLEJDK}" ]; then
      if [ ! -f "${javaExe}" ]; then
        oracle_jdk_name=$(ls ${jdkDir} | grep -v version)
        status "Synchronize Custom JDK files ${oracle_jdk_name}"
        cp -a ${jdkDir}/${oracle_jdk_name}/* ${jdkDir}/
        rm -rf ${jdkDir}/${oracle_jdk_name}
      fi
    fi
    if [ ! -f "${javaExe}" ]; then
      error_return "Unable to retrieve the JDK."
      return 1
    fi
  fi
  export JAVA_HOME=${jdkDir}
  export PATH="${jdkDir}/bin:${PATH}"

  _install_tools ${baseDir}
  install_pinpoit_agent ${baseDir}
  install_jmx_exporter_agent ${baseDir}
  _create_profile_script ${baseDir}
  _create_export_script ${JAVA_HOME} "$(pwd)"
  _install_pgconfig ${JAVA_HOME}
}

install_cacerts() {
  local jdkDir=$1
  if [ -f ${jdkDir}/jre/lib/security/cacerts ] && [ -f /etc/ssl/certs/java/cacerts ]; then
    mv ${jdkDir}/jre/lib/security/cacerts ${jdkDir}/jre/lib/security/cacerts.old
    ln -s /etc/ssl/certs/java/cacerts ${jdkDir}/jre/lib/security/cacerts
  elif [ -f ${jdkDir}/lib/security/cacerts ] && [ -f /etc/ssl/certs/java/cacerts ]; then
    mv ${jdkDir}/lib/security/cacerts ${jdkDir}/lib/security/cacerts.old
    ln -s /etc/ssl/certs/java/cacerts ${jdkDir}/lib/security/cacerts
  fi
}

validate_jdk_url() {
  local jdkUrl=${1}
  local jdkVersion={2}
  status=$(curl --retry 3 --silent --head -w %{http_code} -L ${jdkUrl} -o /dev/null)
  if [ "$status" != "200" ]; then
    echo ""
    error_return "Unsupported Java version: $javaVersion

1. Please check your system.properties file to ensure the java.runtime.version
is among the list of supported version on the Document Center:
https://www.rainbond.com/docs/user-manual/app-creation/language-support/java_more/java-maven/#openjdk支持
You can also remove the system.properties from your repo to install
the default ${DEFAULT_JDK_VERSION} version.
If you continue to have trouble, you can open a support ticket here:
http://www.rainbond.com/docs
2. Please check your network to ensure network resources can be download.Similar to the reference:
https://t.goodrain.com/t/5-1-2/839/2
3. For rainbond arm64/aarch64 source buildpack. jdk 1.6 and 1.7 are no longer supported.

Thanks,
Goodrain"
    return 1
  fi
}

jdk_overlay() {
  baseDir=$1
  shopt -s dotglob
  if [ -d ${baseDir}/.jdk ] && [ -d ${baseDir}/.jdk-overlay ]; then
    if [ -f ${baseDir}/.jdk-overlay/jre/lib/security/cacerts ]; then
      # delete the symlink because a cp will error
      rm ${baseDir}/.jdk/jre/lib/security/cacerts
    fi
    cp -r ${baseDir}/.jdk-overlay/* ${baseDir}/.jdk/
  fi
}

is_java_version_change() {
  jdkDir=$1
  javaVersion=${2:-${DEFAULT_JDK_VERSION}}
  if [ ! -d "${jdkDir}" ]; then
    echo "Invalid JDK directory."
    return 1
  fi
  test -f "${jdkDir}/version" && [ "$(cat ${jdkDir}/version)" != "${javaVersion}" ]
}

_get_jdk_download_url() {
  local jdkVersion=${1:-${DEFAULT_JDK_VERSION}}

  if [ "${jdkVersion}" = "10" ]; then
    local jdkUrl="${JDK_URL_10}"
  elif [ "${jdkVersion}" = "11" ]; then
    local jdkUrl="${JDK_URL_11}"
  elif [ "${jdkVersion}" = "12" ]; then
    local jdkUrl="${JDK_URL_12}"
  elif [ "${jdkVersion}" = "13" ]; then
    local jdkUrl="${JDK_URL_13}"
  elif [ "$(expr "${jdkVersion}" : '^1[0-2]')" != 0 ]; then
    local jdkUrl="${JDK_BASE_URL}/openjdk${jdkVersion}.tar.gz"
  elif [ "$(expr "${jdkVersion}" : '^1.[6-9]$')" != 0 ]; then
    local minorJdkVersion=$(expr "${jdkVersion}" : '1.\([6-9]\)')
    local jdkUrl=$(eval echo \$JDK_URL_1_${minorJdkVersion})
  elif [ "$(expr "${jdkVersion}" : '^[6-9]$')" != 0 ]; then
    local jdkUrl=$(eval echo \$JDK_URL_1_${jdkVersion})
  elif [ "$(expr "${jdkVersion}" : '^1.[6-9]')" != 0 ]; then
    local jdkUrl="${JDK_BASE_URL}/openjdk${jdkVersion}.tar.gz"
  elif [ "${jdkVersion}" = "9+181" ] || [ "${jdkVersion}" = "9.0.0" ]; then
    local jdkUrl="${JDK_BASE_URL}/openjdk9-181.tar.gz"
  elif [ "$(expr "${jdkVersion}" : '^9')" != 0 ]; then
    local jdkUrl="${JDK_BASE_URL}/openjdk${jdkVersion}.tar.gz"
  elif [ "$(expr "${jdkVersion}" : '^zulu-')" != 0 ]; then
    local jdkUrl="${JDK_BASE_URL}/${jdkVersion}.tar.gz"
  elif [ "$(expr "${jdkVersion}" : '^openjdk-')" != 0 ]; then
    local jdkUrl="${JDK_BASE_URL}/$(echo "$jdkVersion" | sed -e 's/k-/k/g').tar.gz"
  fi

  # check that it exists with a head request
  echo "${jdkUrl}"
}

get_default_java_version() {
  if [ ${STACK:-""} = "cedar" ]; then
    echo "1.6"
  else
    echo "$DEFAULT_JDK_VERSION"
  fi
}

detect_java_version() {
  baseDir=${1:-"No Dir"}
  if [ "${baseDir}" = "No Dir" ] || [ ! -d "${baseDir}" ]; then
    error_return "Invalid directory specified for pom file."
    return 1
  fi
  if [ -f ${baseDir}/system.properties ]; then
    detectedVersion="$(get_app_system_value ${baseDir}/system.properties "java.runtime.version")"
    if [ -n "$detectedVersion" ]; then
      echo "$detectedVersion"
    else
      echo "$(get_default_java_version)"
    fi
  else
    echo "$(get_default_java_version)"
  fi
}

get_app_system_value() {
  local file=${1?"No file specified"}
  local key=${2?"No key specified"}

  # escape for regex
  local escaped_key=$(echo $key | sed "s/\./\\\./g")

  [ -f $file ] &&
    grep -E ^$escaped_key[[:space:]=]+ $file |
    sed -E -e "s/$escaped_key([\ \t]*=[\ \t]*|[\ \t]+)([_A-Za-z0-9\.-]*).*/\2/g"
}

_create_profile_script() {
  local profileScript="${1}/.profile.d/jvmcommon.sh"
  local jdbcProfileScript="${1}/.profile.d/jdbc.sh"
  local pinpointProfileScript="${1}/.profile.d/pinpoint.sh"
  local jmxexporterProfileScript="${1}/.profile.d/jmx-exporter.sh"
  local curDir=${JVM_COMMON_DIR:-$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd)}

  mkdir -p "$(dirname $profileScript)"
  cp "$curDir/opt/jvmcommon.sh" "$profileScript"
  cp "$curDir/opt/jdbc.sh" "$jdbcProfileScript"
  cp "$curDir/opt/pinpoint.sh" "$pinpointProfileScript"
  cp "$curDir/opt/jmx-exporter.sh" "$jmxexporterProfileScript"
}

_install_tools() {
  local ctxDir=${1:-BUILD_DIR}
  local curDir=${JVM_COMMON_DIR:-$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd)}

  mkdir -p $ctxDir/.heroku/bin
  mkdir -p $ctxDir/.heroku/with_jmap/bin
  cp $curDir/opt/with_jmap $ctxDir/.heroku/bin/with_jmap
  cp $curDir/opt/with_jmap_java $ctxDir/.heroku/with_jmap/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jmap
  chmod +x $ctxDir/.heroku/with_jmap/bin/java

  mkdir -p $ctxDir/.heroku/with_jstack/bin
  cp $curDir/opt/with_jstack $ctxDir/.heroku/bin/with_jstack
  cp $curDir/opt/with_jstack_java $ctxDir/.heroku/with_jstack/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jstack
  chmod +x $ctxDir/.heroku/with_jstack/bin/java

  mkdir -p $ctxDir/.heroku/with_jmap_and_jstack/bin
  cp $curDir/opt/with_jmap_and_jstack $ctxDir/.heroku/bin/with_jmap_and_jstack
  cp $curDir/opt/with_jmap_and_jstack_java $ctxDir/.heroku/with_jmap_and_jstack/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jmap_and_jstack
  chmod +x $ctxDir/.heroku/with_jmap_and_jstack/bin/java

}

_create_export_script() {
  local javaHome=${1:-JAVA_HOME}
  local ctxDir=${2:-CWD}

  if [ -w ${ctxDir} ]; then
    cat <<EOF >${ctxDir}/export
export JAVA_HOME=$javaHome
export PATH=\$JAVA_HOME/bin:\$PATH
export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server:\$LD_LIBRARY_PATH"
EOF
  fi
}

_install_pgconfig() {
  local javaHome=${1:-JAVA_HOME}
  local extDir="${javaHome}/jre/lib/ext"

  if [ -d "${extDir}" ] && [ -z "${SKIP_PGCONFIG_INSTALL:-}" ]; then
    curl --retry 3 -s -L "${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/jvm/pgconfig.jar" -o ${extDir}/pgconfig.jar
  fi
}

_cache_version() {
  local jdkVersion="${1}"
  local cacheDir="${2}"

  if [ -d "${cacheDir}" ]; then
    echo "java.runtime.version=${jdkVersion}" >"${cacheDir}/system.properties"
  fi
}

install_pinpoit_agent() {
  local install_dir=${1}
  PINPOINT_AGENT_VERSION=${PINPOINT_AGENT_VERSION:-2.0.3}
  DEFAULT_PINPOINT_AGENT="${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/java/pinpoint/pinpoint-agent-${PINPOINT_AGENT_VERSION}.tar.gz"
  PINPOINT_AGENT=${PINPOINT_AGENT:-"${DEFAULT_PINPOINT_AGENT}"}
  mkdir "${install_dir}/.pinpoint"
  curl --retry 3 --silent --location "$PINPOINT_AGENT" | tar xzm -C "${install_dir}/.pinpoint"
  status "Install pinpoint agent success"
}

install_jmx_exporter_agent() {
  local install_dir=${1}
  JMX_EXPORTER_AGENT_VERSION=${JMX_EXPORTER_AGENT_VERSION:-0.15.0}
  JMX_EXPORTER_AGENT="${LANG_GOODRAIN_ME:-http://lang.goodrain.me}/java/jmx-exporter/jmx_prometheus_javaagent-${JMX_EXPORTER_AGENT_VERSION}.jar"
  mkdir "${install_dir}/.jmx-exporter"
  curl --retry 3 --silent --location "${JMX_EXPORTER_AGENT}" -o "${install_dir}/.jmx-exporter/jmx_prometheus_javaagent-${JMX_EXPORTER_AGENT_VERSION}.jar"
  cat >${install_dir}/.jmx-exporter/config.yaml <<EOF
---
lowercaseOutputLabelNames: true
lowercaseOutputName: true
rules:
- pattern: ".*"
EOF
  status "Install jmx exporter agent success"
}
